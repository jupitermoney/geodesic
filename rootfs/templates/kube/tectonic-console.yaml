---
apiVersion: v1
kind: Secret
metadata:
  name: coreos-pull-secret
  namespace: monitoring
data:
  .dockercfg: ewogICJhdXRocyI6IHsKICAgICJxdWF5LmlvIjogewogICAgICAiYXV0aCI6ICJZMjl5Wlc5ekszUmxZekpmYVdaaWRXZHNhMmRwZFhsa1pXMXJaV2hoZW5NeWJXcHpaenBETUZjNFVWSTJVall4V1RKUFFrWlBNemRaUTBwSVZVbzVTRVpPUjBkRVdWcFlTa2hIVGxsRE9GcEJORlpTTlVWUFF6Sk5RbEJHUmxKQlExaEhSMFZFIiwKICAgICAgImVtYWlsIjogIiIKICAgIH0KICB9Cn0=
type: kubernetes.io/dockercfg

---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: tectonic-console
  namespace: monitoring

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tectonic-console
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: tectonic-console
  namespace: monitoring

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    tectonic-app: console
    tectonic-component: ui
  name: tectonic-console
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      tectonic-app: console
      tectonic-component: ui
  template:
    metadata:
      labels:
        tectonic-app: console
        tectonic-component: ui
      name: tectonic-console
    spec:
      containers:
        - command:
            - sh
            - "-c"
            - "/opt/bridge/bin/bridge"
          env:
            - name: BRIDGE_K8S_IN_CLUSTER
              value: "true"
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc.cluster.local"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
            - name: BRIDGE_PUBLIC_DIR
              value: /opt/bridge/static
            - name: BRIDGE_TECTONIC_VERSION
              value: v6.0.7
            - name: BRIDGE_IDENTITY_FILE
              value: /etc/coreos-pull-secret/.dockercfg
          image: quay.io/coreos/tectonic-console:c150c51b4373d0c10b831d08a6983e4c753026a0
          name: tectonic-console
          ports:
            - containerPort: 9000
              protocol: TCP
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
          volumeMounts:
            - name: coreos-pull-secret
              mountPath: /etc/coreos-pull-secret
              readOnly: true
          terminationMessagePath: /dev/termination-log
      volumes:
        - name: coreos-pull-secret
          secret:
            secretName: coreos-pull-secret
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: coreos-pull-secret
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      serviceAccount: tectonic-console
      serviceAccountName: tectonic-console


---

apiVersion: v1
kind: Service
metadata:
  labels:
    tectonic-app: console
    tectonic-component: ui
  name: tectonic-console
  namespace: monitoring
spec:
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    tectonic-app: console
    tectonic-component: ui

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    external-dns.alpha.kubernetes.io/ttl: "60"
    external-dns.alpha.kubernetes.io/hostname: "dashboard.dev.niki.ai"
    external-dns.alpha.kubernetes.io/target: "ingress.dev.niki.ai"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    certmanager.k8s.io/acme-challenge-type: "dns01"
    certmanager.k8s.io/acme-dns01-provider: "prod-dns"
  name: tectonic-console
  namespace: monitoring
spec:
  rules:
  - host: dashboard.dev.niki.ai
    http:
      paths:
      - backend:
          serviceName: tectonic-console
          servicePort: 9000
        path: /
  tls:
  - hosts:
    - dashboard.dev.niki.ai
    secretName: dashboard-server-tls

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    external-dns.alpha.kubernetes.io/ttl: "60"
    external-dns.alpha.kubernetes.io/hostname: "dashboard.dev.niki.ai"
    external-dns.alpha.kubernetes.io/target: "ingress.dev.niki.ai"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    certmanager.k8s.io/acme-challenge-type: "dns01"
    certmanager.k8s.io/acme-dns01-provider: "prod-dns"
  name: tectonic-console
  namespace: monitoring
spec:
  rules:
  - host: dashboard.dev.niki.ai
    http:
      paths:
      - backend:
          serviceName: tectonic-console
          servicePort: 9000
        path: /
  tls:
  - hosts:
    - dashboard.dev.niki.ai
    secretName: dashboard-server-tls

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    external-dns.alpha.kubernetes.io/ttl: "60"
    external-dns.alpha.kubernetes.io/hostname: "grafana.dev.niki.ai"
    external-dns.alpha.kubernetes.io/target: "ingress.dev.niki.ai"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    certmanager.k8s.io/acme-challenge-type: "dns01"
    certmanager.k8s.io/acme-dns01-provider: "prod-dns"
  name: grafana-console
  namespace: monitoring
spec:
  rules:
  - host: grafana.dev.niki.ai
    http:
      paths:
      - backend:
          serviceName: grafana
          servicePort: 3000
        path: /
  tls:
  - hosts:
    - grafana.dev.niki.ai
    secretName: grafana-server-tls

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    external-dns.alpha.kubernetes.io/ttl: "60"
    external-dns.alpha.kubernetes.io/hostname: "prometheus.dev.niki.ai"
    external-dns.alpha.kubernetes.io/target: "ingress.dev.niki.ai"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    certmanager.k8s.io/acme-challenge-type: "dns01"
    certmanager.k8s.io/acme-dns01-provider: "prod-dns"
  name: prometheus-console
  namespace: monitoring
spec:
  rules:
  - host: prometheus.dev.niki.ai
    http:
      paths:
      - backend:
          serviceName: prometheus-k8s
          servicePort: 9090
        path: /
  tls:
  - hosts:
    - prometheus.dev.niki.ai
    secretName: prometheus-server-tls
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    kubernetes.io/tls-acme: "true"
    external-dns.alpha.kubernetes.io/ttl: "60"
    external-dns.alpha.kubernetes.io/hostname: "alerts.dev.niki.ai"
    external-dns.alpha.kubernetes.io/target: "ingress.dev.niki.ai"
    certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    certmanager.k8s.io/acme-challenge-type: "dns01"
    certmanager.k8s.io/acme-dns01-provider: "prod-dns"
  name: alerts-console
  namespace: monitoring
spec:
  rules:
  - host: alerts.dev.niki.ai
    http:
      paths:
      - backend:
          serviceName: alertmanager-main
          servicePort: 9093
        path: /
  tls:
  - hosts:
    - alerts.dev.niki.ai
    secretName: alerts-server-tls
